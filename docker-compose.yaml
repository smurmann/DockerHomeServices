version: "3.7"
networks:
    traefik_proxy:
        external:
            name: traefik_proxy
    default:
        driver: bridge

#### Core
services:
    reverse-proxy:
        image: traefik:v2.0
        container_name: traefik
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true
        networks:
            - traefik_proxy
        ports: 
           - 80:80
           - 443:443
           - ${TRAEFIK_PORT}:8080
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ${USERDIR}/docker/traefik/traefik.yml:/traefik.yml:ro
        - ${USERDIR}/docker/traefik/acme/acme.json:/acme.json
        - ${USERDIR}/docker/shared:/shared
        labels: 
          - "traefik.enable=true"
          - "traefik.http.routers.traefik.entrypoints=http"
          - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAINNAME}`)"
          - "traefik.http.middlewares.traefik-auth.basicauth.users=${HTTP_USERNAME}:${HTTP_PASSWORD}"
          - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
          - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
          - "traefik.http.routers.traefik-secure.entrypoints=https"
          - "traefik.http.routers.traefik-secure.rule=Host(`traefik.${DOMAINNAME}`)"
          - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
          - "traefik.http.routers.traefik-secure.tls=true"
          - "traefik.http.routers.traefik-secure.tls.certresolver=http"
          - "traefik.http.routers.traefik-secure.service=api@internal"
    
    pihole:
        image: pihole/pihole:latest
        container_name: pihole
        restart: unless-stopped
        ports:
            - 53:53/tcp
            - 53:53/udp
            - 67:67/udp
            - ${PIHOLE_PORT}:80/tcp
        volumes:
            - ${USERDIR}/docker/pihole/config:/etc/pihole
            - ${USERDIR}/docker/pihole/dsnmasqd:/etc/dnsmasq.d/
            - ${USERDIR}/docker/pihole/pihole.log:/var/log/pihole.log
        environment:
            - TZ=${TZ}
        networks:
            - traefik_proxy
        labels: 
            - "traefik.enable=true"
            - "traefik.http.routers.pihole.entrypoints=http"
            - "traefik.http.routers.pihole.rule=Host(`pihole.${DOMAINNAME}`)"
            - "traefik.http.middlewares.pihole-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.pihole.middlewares=pihole-https-redirect"
            - "traefik.http.routers.pihole-secure.entrypoints=https"
            - "traefik.http.routers.pihole-secure.rule=Host(`pihole.${DOMAINNAME}`)"
            - "traefik.http.routers.pihole-secure.tls=true"
            - "traefik.http.routers.pihole-secure.tls.certresolver=http"
            - "traefik.http.routers.pihole-secure.service=pihole"
            - "traefik.http.services.pihole.loadbalancer.server.port=${PIHOLE_PORT}"
            - "traefik.docker.network=traefik_proxy"

    portainer:
        image: portainer/portainer
        hostname: portainer
        container_name: portainer
        restart: always
        command: -H unix:///var/run/docker.sock
        ports:
          - ${PORTAINER_PORT}:9000
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - ${USERDIR}/docker/portainer/data:/data
          - ${USERDIR}/docker/shared:/shared
        environment:
          - TZ=${TZ}
        networks:
          - traefik_proxy
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.portainer.entrypoints=http"
            - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAINNAME}`)"
            - "traefik.http.middlewares.portainer-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.portainer.middlewares=portainer-https-redirect"
            - "traefik.http.routers.portainer-secure.entrypoints=https"
            - "traefik.http.routers.portainer-secure.rule=Host(`portainer.${DOMAINNAME}`)"
            - "traefik.http.routers.portainer-secure.tls=true"
            - "traefik.http.routers.portainer-secure.tls.certresolver=http"
            - "traefik.http.routers.portainer-secure.service=portainer"
            - "traefik.http.services.portainer.loadbalancer.server.port=${PORTAINER_PORT}"
            - "traefik.docker.network=traefik_proxy"

    watchtower:
        container_name: watchtower
        restart: unless-stopped
        image: v2tec/watchtower
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
        command: --schedule "0 0 4 * * SUN" --cleanup
        environment:
          - TZ=${TZ}

    # Docker-GC - Automatic Docker Garbage Collection 
    # Create docker-gc-exclude file
    dockergc:
        image: clockworksoul/docker-gc-cron:latest
        container_name: docker-gc
        hostname: docker-gc
        restart: unless-stopped
        network_mode: none
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ${USERDIR}/docker/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
        environment:
            CRON: 0 0 * * *
            FORCE_IMAGE_REMOVAL: 1
            FORCE_CONTAINER_REMOVAL: 0
            GRACE_PERIOD_SECONDS: 604800
            DRY_RUN: 0
            CLEAN_UP_VOLUMES: 1
            TZ: ${TZ}

# media:
    deluge:
        container_name: deluge
        restart: unless-stopped
        image: binhex/arch-delugevpn:2.0.3-2-01
        networks:
            - traefik_proxy
        cap_add:
            - NET_ADMIN
        ports:
          - ${DELUGE_PORT}:8112
          - 8118:8118
          - 58846:58846
          - 58946:58946
        volumes:
          - ${USERDIR}/Downloads/completed:/data
          - ${USERDIR}/docker/deluge/config:/config
          - ${USERDIR}/docker/shared:/shared
          - /mnt/downloads:/kee
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=000
            - VPN_ENABLED=yes
            - VPN_USER=p9007672
            - VPN_PASS=erNWw8ioqg
            - VPN_PROV=pia 
            - STRICT_PORT_FORWARD=yes
            - ENABLE_PRIVOXY=no
            - DEBUG=false
            - DELUGE_WEB_LOG_LEVEL=info
            - DELUGE_DAEMON_LOG_LEVEL=info
            - LAN_NETWORK=192.168.1.0/24
            - NAME_SERVERS=8.8.8.8,8.8.4.4
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.deluge.entrypoints=http"
            - "traefik.http.routers.deluge.rule=Host(`deluge.${DOMAINNAME}`)"
            - "traefik.http.middlewares.deluge-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.deluge.middlewares=deluge-https-redirect"
            - "traefik.http.routers.deluge-secure.entrypoints=https"
            - "traefik.http.routers.deluge-secure.rule=Host(`deluge.${DOMAINNAME}`)"
            - "traefik.http.routers.deluge-secure.tls=true"
            - "traefik.http.routers.deluge-secure.tls.certresolver=http"
            - "traefik.http.routers.deluge-secure.service=deluge"
            - "traefik.http.services.deluge.loadbalancer.server.port=${DELUGE_PORT}"
            - "traefik.docker.network=traefik_proxy"

    jackett:
        image: linuxserver/jackett
        container_name: jackett
        networks:
            - traefik_proxy
        ports:
            - ${JACKETT_PORT}:9117
        volumes:
            - ${USERDIR}/docker/jackett/config:/config
            - ${USERDIR}/Downloads/blackhole:/downloads
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.jackett.entrypoints=http"
            - "traefik.http.routers.jackett.rule=Host(`jackett.${DOMAINNAME}`)"
            - "traefik.http.middlewares.jackett-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.jackett.middlewares=jackett-https-redirect"
            - "traefik.http.routers.jackett-secure.entrypoints=https"
            - "traefik.http.routers.jackett-secure.rule=Host(`jackett.${DOMAINNAME}`)"
            - "traefik.http.routers.jackett-secure.tls=true"
            - "traefik.http.routers.jackett-secure.tls.certresolver=http"
            - "traefik.http.routers.jackett-secure.service=jackett"
            - "traefik.http.services.jackett.loadbalancer.server.port=${JACKETT_PORT}"
            - "traefik.docker.network=traefik_proxy"

    traktarr:
        image: eafxx/traktarr
        container_name: traktarr
        networks:
            - traefik_proxy
        volumes:
            - ${USERDIR}/docker/traktarr/config:/config
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
            - DELAY=2.5        
            - SORT=rating
            - NOSEARCH=yes
            - NOTIFICATIONS=yes
            - BLACKLIST=yes
            - RUNNOW=yes
            - SKIPUPDATE=no
            - APP_BRANCH=master

    radarr:
        image: linuxserver/radarr
        container_name: radarr
        networks:
            - traefik_proxy
        volumes:
            - ${USERDIR}/docker/radarr:/config
            - ${USERDIR}/Downloads/completed:/downloads
            - /mnt/plex-media/movies:/movies
            - /etc/localtime:/etc/localtime:ro
            - ${USERDIR}/docker/shared:/shared
            - /mnt/downloads:/kee
        ports:
            - ${RADARR_PORT}:7878
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.radarr.entrypoints=http"
            - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAINNAME}`)"
            - "traefik.http.middlewares.radarr-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.radarr.middlewares=radarr-https-redirect"
            - "traefik.http.routers.radarr-secure.entrypoints=https"
            - "traefik.http.routers.radarr-secure.rule=Host(`radarr.${DOMAINNAME}`)"
            - "traefik.http.routers.radarr-secure.tls=true"
            - "traefik.http.routers.radarr-secure.tls.certresolver=http"
            - "traefik.http.routers.radarr-secure.service=radarr"
            - "traefik.http.services.radarr.loadbalancer.server.port=${RADARR_PORT}"
            - "traefik.docker.network=traefik_proxy"

    sonarr:
        image: linuxserver/sonarr
        container_name: sonarr
        networks:
            - traefik_proxy
        volumes:
            - ${USERDIR}/docker/sonarr:/config
            - ${USERDIR}/Downloads/completed:/downloads
            - /mnt/plex-media/tv:/tv
            - /mnt/plex-media/anime:/anime
            - /etc/localtime:/etc/localtime:ro
            - ${USERDIR}/docker/shared:/shared
            - /mnt/downloads:/kee
        ports:
            - ${SONARR_PORT}:8989
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.sonarr.entrypoints=http"
            - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAINNAME}`)"
            - "traefik.http.middlewares.sonarr-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.sonarr.middlewares=sonarr-https-redirect"
            - "traefik.http.routers.sonarr-secure.entrypoints=https"
            - "traefik.http.routers.sonarr-secure.rule=Host(`sonarr.${DOMAINNAME}`)"
            - "traefik.http.routers.sonarr-secure.tls=true"
            - "traefik.http.routers.sonarr-secure.tls.certresolver=http"
            - "traefik.http.routers.sonarr-secure.service=sonarr"
            - "traefik.http.services.sonarr.loadbalancer.server.port=${SONARR_PORT}"
            - "traefik.docker.network=traefik_proxy"

    lidarr:
        image: linuxserver/lidarr
        container_name: lidarr
        networks:
            - traefik_proxy
        volumes:
            - ${USERDIR}/docker/lidarr:/config
            - ${USERDIR}/Downloads/completed:/downloads
            - /mnt/plex-media/music:/music

        ports:
            - ${LIDARR_PORT}:8686
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.lidarr.entrypoints=http"
            - "traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAINNAME}`)"
            - "traefik.http.middlewares.lidarr-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.lidarr.middlewares=lidarr-https-redirect"
            - "traefik.http.routers.lidarr-secure.entrypoints=https"
            - "traefik.http.routers.lidarr-secure.rule=Host(`lidarr.${DOMAINNAME}`)"
            - "traefik.http.routers.lidarr-secure.tls=true"
            - "traefik.http.routers.lidarr-secure.tls.certresolver=http"
            - "traefik.http.routers.lidarr-secure.service=lidarr"
            - "traefik.http.services.lidarr.loadbalancer.server.port=${LIDARR_PORT}"
            - "traefik.docker.network=traefik_proxy"

    bazarr:
        image: linuxserver/bazarr
        container_name: bazarr
        networks:
            - traefik_proxy
        volumes:
            - ${USERDIR}/docker/bazarr:/config
            - /mnt/plex-media/tv:/tv
            - /mnt/plex-media/anime:/anime
            - /mnt/plex-media/movies:/movies
        ports:
            - ${BAZARR_PORT}:6767
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.bazarr.entrypoints=http"
            - "traefik.http.routers.bazarr.rule=Host(`bazarr.${DOMAINNAME}`)"
            - "traefik.http.middlewares.bazarr-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.bazarr.middlewares=bazarr-https-redirect"
            - "traefik.http.routers.bazarr-secure.entrypoints=https"
            - "traefik.http.routers.bazarr-secure.rule=Host(`bazarr.${DOMAINNAME}`)"
            - "traefik.http.routers.bazarr-secure.tls=true"
            - "traefik.http.routers.bazarr-secure.tls.certresolver=http"
            - "traefik.http.routers.bazarr-secure.service=bazarr"
            - "traefik.http.services.bazarr.loadbalancer.server.port=${BAZARR_PORT}"
            - "traefik.docker.network=traefik_proxy"

    tautulli:
        image: linuxserver/tautulli
        container_name: tautulli
        networks:
            - traefik_proxy
        volumes:
            - ${USERDIR}/docker/tautulli/config:/config
            - ${USERDIR}/docker/tautulli/logs:/logs:ro
            - ${USERDIR}/docker/shared:/shared
        ports:
            - ${TAUTULLI_PORT}:8181
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.tautulli.entrypoints=http"
            - "traefik.http.routers.tautulli.rule=Host(`tautulli.${DOMAINNAME}`)"
            - "traefik.http.middlewares.tautulli-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.tautulli.middlewares=tautulli-https-redirect"
            - "traefik.http.routers.tautulli-secure.entrypoints=https"
            - "traefik.http.routers.tautulli-secure.rule=Host(`tautulli.${DOMAINNAME}`)"
            - "traefik.http.routers.tautulli-secure.tls=true"
            - "traefik.http.routers.tautulli-secure.tls.certresolver=http"
            - "traefik.http.routers.tautulli-secure.service=tautulli"
            - "traefik.http.services.tautulli.loadbalancer.server.port=${TAUTULLI_PORT}"
            - "traefik.docker.network=traefik_proxy"

# monitoring:
    # Glances - System Information
    glances:
        image: nicolargo/glances:latest-alpine
        restart: unless-stopped
        hostname: glances
        container_name: glances
        restart: unless-stopped
        privileged: true
        networks:
            - traefik_proxy
        ports:
            - "${GLANCES_PORT}:61208"
        pid: host
        volumes:
            - ${USERDIR}/docker/glances/glances.conf:/glances/conf/glances.conf
            - /var/run/docker.sock:/var/run/docker.sock:ro
        environment:
            GLANCES_OPT: "-w"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.glances.entrypoints=http"
            - "traefik.http.routers.glances.rule=Host(`glances.${DOMAINNAME}`)"
            - "traefik.http.middlewares.glances-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.glances.middlewares=glances-https-redirect"
            - "traefik.http.routers.glances-secure.entrypoints=https"
            - "traefik.http.routers.glances-secure.rule=Host(`glances.${DOMAINNAME}`)"
            - "traefik.http.routers.glances-secure.tls=true"
            - "traefik.http.routers.glances-secure.tls.certresolver=http"
            - "traefik.http.routers.glances-secure.service=glances"
            - "traefik.http.services.glances.loadbalancer.server.port=${GLANCES_PORT}"
            - "traefik.docker.network=traefik_proxy"


    jenkins:
        image: jenkins/jenkins:lts
        restart: unless-stopped
        hostname: jenkins
        container_name: jenkins
        networks:
            - traefik_proxy
        ports:
            - "${JENKINSWEB_PORT}:8080"
            - "${JENKINSSLAVE_PORT}:50000"
        volumes:
            - ${USERDIR}/docker/jenkins:/var/jenkins_home
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
            - JAVA_OPTS="-Djava.awt.headless=true"
        user: ${PUID}
        privileged: true
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.jenkins.entrypoints=http"
            - "traefik.http.routers.jenkins.rule=Host(`jenkins.${DOMAINNAME}`)"
            - "traefik.http.middlewares.jenkins-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.jenkins.middlewares=jenkins-https-redirect"
            - "traefik.http.routers.jenkins-secure.entrypoints=https"
            - "traefik.http.routers.jenkins-secure.rule=Host(`jenkins.${DOMAINNAME}`)"
            - "traefik.http.routers.jenkins-secure.tls=true"
            - "traefik.http.routers.jenkins-secure.tls.certresolver=http"
            - "traefik.http.routers.jenkins-secure.service=jenkins"
            - "traefik.http.services.jenkins.loadbalancer.server.port=${JENKINSWEB_PORT}"
            - "traefik.docker.network=traefik_proxy"

#paperless
    # paperless-webserver:
    #     image: pitkley/paperless
    #     restart: unless-stopped
    #     container_name: papserless-webserver
    #     networks:
    #         - traefik_proxy
    #     volumes:
    #         - ${USERDIR}/docker/paperless/data:/usr/src/paperless/data
    #         - ${USERDIR}/docker/paperless/media:/usr/src/paperless/media
    #         - ${USERDIR}/docker/paperless/paperless.conf:/etc/paperless.conf:ro 
    #         - /etc/localtime:/etc/localtime:ro
    #     environment:
    #         - PUID=${PUID}
    #         - PGID=${PGID}
    #     ports:
    #         - "${PAPERLESS_PORT}:8000"
    #     command: ["runserver"]
    #     labels:
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.paperless.entrypoints=http"
    #         - "traefik.http.routers.paperless.rule=Host(`paperless.${DOMAINNAME}`)"
    #         - "traefik.http.middlewares.paperless-https-redirect.redirectscheme.scheme=https"
    #         - "traefik.http.routers.paperless.middlewares=paperless-https-redirect"
    #         - "traefik.http.routers.paperless-secure.entrypoints=https"
    #         - "traefik.http.routers.paperless-secure.rule=Host(`paperless.${DOMAINNAME}`)"
    #         - "traefik.http.routers.paperless-secure.tls=true"
    #         - "traefik.http.routers.paperless-secure.tls.certresolver=http"
    #         - "traefik.http.routers.paperless-secure.service=paperless"
    #         - "traefik.http.services.paperless.loadbalancer.server.port=${PAPERLESS_PORT}"
    #         - "traefik.docker.network=traefik_proxy"
    
    # paperless-consumer:
    #     image: pitkley/paperless
    #     restart: unless-stopped
    #     container_name: papserless-consumer
    #     volumes:
    #         - ${USERDIR}/docker/paperless/data:/usr/src/paperless/data
    #         - ${USERDIR}/docker/paperless/media:/usr/src/paperless/media
    #         - ${USERDIR}/docker/paperless/paperless.conf:/etc/paperless.conf:ro 
    #         - /etc/localtime:/etc/localtime:ro
    #         - ${USERDIR}/docker/paperless/consume:/consume 
    #     environment:
    #         - PUID=${PUID}
    #         - PGID=${PGID}
    #     command: ["document_consumer"]