version: "3.7"
networks:
    proxy:
        external:
            name: proxy
    default:
        driver: bridge


services:

    # Proxy
    caddy:
        build: ./caddy/dns-dockerfile
        container_name: caddy
        hostname: caddy
        restart: unless-stopped
        ports:
          - "80:80"
          - "443:443"
        environment:
          - DOMAINNAME
          - CLOUDFLARE_API_TOKEN
        volumes:
          - ${USERDIR}/docker/services/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
          - ${USERDIR}/docker/services/caddy/data:/data
          - ${USERDIR}/docker/services/caddy/config:/config
    
    # Docker monitoring
    portainer:
        image: portainer/portainer
        hostname: portainer
        container_name: portainer
        restart: always
        command: -H unix:///var/run/docker.sock
        ports:
          - ${PORTAINER_PORT}:9000
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - ${USERDIR}/docker/portainer/data:/data
          - ${USERDIR}/docker/shared:/shared
        environment:
          - TZ=${TZ}
        networks:
          - proxy

    # Docker maintanence
    watchtower:
        container_name: watchtower
        restart: unless-stopped
        image: v2tec/watchtower
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
        command: --schedule "0 0 4 * * SUN" --cleanup
        environment:
          - TZ=${TZ}

    dockergc:
        image: clockworksoul/docker-gc-cron:latest
        container_name: docker-gc
        hostname: docker-gc
        restart: unless-stopped
        network_mode: none
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ${USERDIR}/docker/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
        environment:
            CRON: 0 0 * * *
            FORCE_IMAGE_REMOVAL: 1
            FORCE_CONTAINER_REMOVAL: 0
            GRACE_PERIOD_SECONDS: 604800
            DRY_RUN: 0
            CLEAN_UP_VOLUMES: 1
            TZ: ${TZ}

    # Media services
    deluge:
        container_name: deluge
        restart: unless-stopped
        image: binhex/arch-delugevpn:2.0.3-2-01
        networks:
            - proxy
        cap_add:
            - NET_ADMIN
        ports:
          - ${DELUGE_PORT}:8112
          - 8118:8118
          - 58846:58846
          - 58946:58946
        volumes:
          - ${USERDIR}/Downloads/completed:/data
          - ${USERDIR}/docker/deluge/config:/config
          - ${USERDIR}/docker/shared:/shared
          - /mnt/downloads:/kee
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=000
            - VPN_ENABLED=yes
            - VPN_USER=p9007672
            - VPN_PASS=erNWw8ioqg
            - VPN_PROV=pia 
            - STRICT_PORT_FORWARD=yes
            - ENABLE_PRIVOXY=no
            - DEBUG=false
            - DELUGE_WEB_LOG_LEVEL=info
            - DELUGE_DAEMON_LOG_LEVEL=info
            - LAN_NETWORK=192.168.1.0/24
            - NAME_SERVERS=8.8.8.8,8.8.4.4

    jackett:
        image: linuxserver/jackett
        container_name: jackett
        networks:
            - proxy
        ports:
            - ${JACKETT_PORT}:9117
        volumes:
            - ${USERDIR}/docker/jackett/config:/config
            - ${USERDIR}/Downloads/blackhole:/downloads
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}

    traktarr:
        image: eafxx/traktarr
        container_name: traktarr
        networks:
            - proxy
        volumes:
            - ${USERDIR}/docker/traktarr/config:/config
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
            - DELAY=2.5        
            - SORT=rating
            - NOSEARCH=yes
            - NOTIFICATIONS=yes
            - BLACKLIST=yes
            - RUNNOW=yes
            - SKIPUPDATE=no
            - APP_BRANCH=master

    radarr:
        image: linuxserver/radarr:preview
        container_name: radarr
        networks:
            - proxy
        volumes:
            - ${USERDIR}/docker/radarr:/config
            - ${USERDIR}/Downloads/completed:/downloads
            - /mnt/plex-media/movies:/movies
            - /etc/localtime:/etc/localtime:ro
            - ${USERDIR}/docker/shared:/shared
            - /mnt/downloads:/kee
        ports:
            - ${RADARR_PORT}:7878
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}

    sonarr:
        image: linuxserver/sonarr:preview
        container_name: sonarr
        networks:
            - proxy
        volumes:
            - ${USERDIR}/docker/sonarr:/config
            - ${USERDIR}/Downloads/completed:/downloads
            - /mnt/plex-media/tv:/tv
            - /mnt/plex-media/anime:/anime
            - /etc/localtime:/etc/localtime:ro
            - ${USERDIR}/docker/shared:/shared
            - /mnt/downloads:/kee
        ports:
            - ${SONARR_PORT}:8989
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}

    lidarr:
        image: linuxserver/lidarr
        container_name: lidarr
        networks:
            - proxy
        volumes:
            - ${USERDIR}/docker/lidarr:/config
            - ${USERDIR}/Downloads/completed:/downloads
            - /mnt/plex-media/music:/music

        ports:
            - ${LIDARR_PORT}:8686
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}

    bazarr:
        image: linuxserver/bazarr
        container_name: bazarr
        networks:
            - proxy
        volumes:
            - ${USERDIR}/docker/bazarr:/config
            - /mnt/plex-media/tv:/tv
            - /mnt/plex-media/anime:/anime
            - /mnt/plex-media/movies:/movies
        ports:
            - ${BAZARR_PORT}:6767
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}

    tautulli:
        image: linuxserver/tautulli
        container_name: tautulli
        networks:
            - proxy
        volumes:
            - ${USERDIR}/docker/tautulli/config:/config
            - ${USERDIR}/docker/tautulli/logs:/logs:ro
            - ${USERDIR}/docker/shared:/shared
        ports:
            - ${TAUTULLI_PORT}:8181
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}

    # System Monitoring
    glances:
        image: nicolargo/glances:latest-alpine
        restart: unless-stopped
        hostname: glances
        container_name: glances
        restart: unless-stopped
        privileged: true
        networks:
            - proxy
        ports:
            - "${GLANCES_PORT}:61208"
        pid: host
        volumes:
            - ${USERDIR}/docker/glances/glances.conf:/glances/conf/glances.conf
            - /var/run/docker.sock:/var/run/docker.sock:ro
        environment:
            GLANCES_OPT: "-w"

    # Game Services
    minecraft:
        image: itzg/minecraft-server
        ports:
            - "${MINECRAFT_PORT}:25565"
        volumes:
            - "${USERDIR}/docker/minecraft/server:/data"
        environment:
            EULA: "TRUE"
            CONSOLE: "false"
            ENABLE_RCON: "true"
            RCON_PASSWORD: "testing"
            RCON_PORT: 28016
        restart: always
    rcon:
        image: itzg/rcon
        ports:
            - "4326:4326"
            - "4327:4327"
        volumes:
            - "${USERDIR}/docker/minecraft/server:/opt/rcon-web-admin/db"
        environment:
            RWA_PASSWORD : "testing"

    ark:
        container_name: ark
        image: peet2k17/ark
        environment:
            - SESSIONNAME=${ARK_SESSIONNAME}
            - SERVERMAP=${ARK_SERVERMAP}
            - MAX_PLAYERS=5
            - SERVERPASSWORD=${ARK_SERVERPW}
            - ADMINPASSWORD=${ARK_ADMINPW}
            - SERVERPORT=27015
            - STEAMPORT=7778
            - BACKUPONSTART=0
            - BACKUPONSTOP=1
            - WARNONSTOP=1
            - UPDATEONSTART=1
            - TZ=UTC
            - ARK_GID=1000
            - ARK_UID=1000
        volumes:
            - ${USERDIR}/docker/ark/server:/ark
        ports:
            - 7778:7778/udp
            - 7778:7778
            - 7777:7777/udp
            - 7777:7777
            - 27015:27015/udp
            - 27015:27015
            - 32330:32330

    # WIP
    # jenkins:
    #     image: jenkins/jenkins:lts
    #     restart: unless-stopped
    #     hostname: jenkins
    #     container_name: jenkins
    #     networks:
    #         - proxy
    #     ports:
    #         - "${JENKINSWEB_PORT}:8080"
    #         - "${JENKINSSLAVE_PORT}:50000"
    #     volumes:
    #         - ${USERDIR}/docker/jenkins:/var/jenkins_home
    #     environment:
    #         - PUID=${PUID}
    #         - PGID=${PGID}
    #         - TZ=${TZ}
    #         - JAVA_OPTS="-Djava.awt.headless=true"
    #     user: ${PUID}
    #     privileged: true
    #     labels:
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.jenkins.entrypoints=http"
    #         - "traefik.http.routers.jenkins.rule=Host(`jenkins.${DOMAINNAME}`)"
    #         - "traefik.http.middlewares.jenkins-https-redirect.redirectscheme.scheme=https"
    #         - "traefik.http.routers.jenkins.middlewares=jenkins-https-redirect"
    #         - "traefik.http.routers.jenkins-secure.entrypoints=https"
    #         - "traefik.http.routers.jenkins-secure.rule=Host(`jenkins.${DOMAINNAME}`)"
    #         - "traefik.http.routers.jenkins-secure.tls=true"
    #         - "traefik.http.routers.jenkins-secure.tls.certresolver=http"
    #         - "traefik.http.routers.jenkins-secure.service=jenkins"
    #         - "traefik.http.services.jenkins.loadbalancer.server.port=${JENKINSWEB_PORT}"
    #         - "traefik.docker.network=proxy"
